/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.mysql.tables


import java.time.LocalDateTime

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.kotlin.mysql.Mcve
import org.jooq.mcve.kotlin.mysql.keys.FK_ACCOUNT__ORGANIZATION_ID
import org.jooq.mcve.kotlin.mysql.keys.FK_USERPREFERENCE__ORGANIZATION_ID
import org.jooq.mcve.kotlin.mysql.keys.FK_USER__ORGANIZATION_ID
import org.jooq.mcve.kotlin.mysql.keys.KEY_ORGANIZATION_PRIMARY
import org.jooq.mcve.kotlin.mysql.tables.Account.AccountPath
import org.jooq.mcve.kotlin.mysql.tables.User.UserPath
import org.jooq.mcve.kotlin.mysql.tables.Userpreference.UserpreferencePath
import org.jooq.mcve.kotlin.mysql.tables.records.OrganizationRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Organization(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, OrganizationRecord>?,
    parentPath: InverseForeignKey<out Record, OrganizationRecord>?,
    aliased: Table<OrganizationRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<OrganizationRecord>(
    alias,
    Mcve.MCVE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>mcve.Organization</code>
         */
        val ORGANIZATION: Organization = Organization()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OrganizationRecord> = OrganizationRecord::class.java

    /**
     * The column <code>mcve.Organization.id</code>.
     */
    val ID: TableField<OrganizationRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>mcve.Organization.createdAt</code>.
     */
    val CREATEDAT: TableField<OrganizationRecord, LocalDateTime?> = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>mcve.Organization.modifiedAt</code>.
     */
    val MODIFIEDAT: TableField<OrganizationRecord, LocalDateTime?> = createField(DSL.name("modifiedAt"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>mcve.Organization.name</code>.
     */
    val NAME: TableField<OrganizationRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<OrganizationRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<OrganizationRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<OrganizationRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>mcve.Organization</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mcve.Organization</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mcve.Organization</code> table reference
     */
    constructor(): this(DSL.name("Organization"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OrganizationRecord>?, parentPath: InverseForeignKey<out Record, OrganizationRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ORGANIZATION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OrganizationPath : Organization, Path<OrganizationRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OrganizationRecord>?, parentPath: InverseForeignKey<out Record, OrganizationRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<OrganizationRecord>): super(alias, aliased)
        override fun `as`(alias: String): OrganizationPath = OrganizationPath(DSL.name(alias), this)
        override fun `as`(alias: Name): OrganizationPath = OrganizationPath(alias, this)
        override fun `as`(alias: Table<*>): OrganizationPath = OrganizationPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Mcve.MCVE
    override fun getIdentity(): Identity<OrganizationRecord, Long?> = super.getIdentity() as Identity<OrganizationRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<OrganizationRecord> = KEY_ORGANIZATION_PRIMARY

    private lateinit var _account: AccountPath

    /**
     * Get the implicit to-many join path to the <code>mcve.Account</code> table
     */
    fun account(): AccountPath {
        if (!this::_account.isInitialized)
            _account = AccountPath(this, null, FK_ACCOUNT__ORGANIZATION_ID.inverseKey)

        return _account;
    }

    val account: AccountPath
        get(): AccountPath = account()

    private lateinit var _user: UserPath

    /**
     * Get the implicit to-many join path to the <code>mcve.User</code> table
     */
    fun user(): UserPath {
        if (!this::_user.isInitialized)
            _user = UserPath(this, null, FK_USER__ORGANIZATION_ID.inverseKey)

        return _user;
    }

    val user: UserPath
        get(): UserPath = user()

    private lateinit var _userpreference: UserpreferencePath

    /**
     * Get the implicit to-many join path to the
     * <code>mcve.UserPreference</code> table
     */
    fun userpreference(): UserpreferencePath {
        if (!this::_userpreference.isInitialized)
            _userpreference = UserpreferencePath(this, null, FK_USERPREFERENCE__ORGANIZATION_ID.inverseKey)

        return _userpreference;
    }

    val userpreference: UserpreferencePath
        get(): UserpreferencePath = userpreference()
    override fun `as`(alias: String): Organization = Organization(DSL.name(alias), this)
    override fun `as`(alias: Name): Organization = Organization(alias, this)
    override fun `as`(alias: Table<*>): Organization = Organization(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Organization = Organization(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Organization = Organization(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Organization = Organization(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Organization = Organization(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Organization = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Organization = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Organization = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Organization = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Organization = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Organization = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Organization = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Organization = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Organization = where(DSL.notExists(select))
}
