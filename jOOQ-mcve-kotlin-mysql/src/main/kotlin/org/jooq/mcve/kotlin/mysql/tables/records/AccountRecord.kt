/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.mysql.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.mysql.tables.Account


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AccountRecord() : UpdatableRecordImpl<AccountRecord>(Account.ACCOUNT) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var createdat: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var modifiedat: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var firstname: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var lastname: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var emailaddress: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var organizationId: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised AccountRecord
     */
    constructor(id: Long? = null, createdat: LocalDateTime? = null, modifiedat: LocalDateTime? = null, firstname: String? = null, lastname: String? = null, emailaddress: String? = null, organizationId: Long? = null): this() {
        this.id = id
        this.createdat = createdat
        this.modifiedat = modifiedat
        this.firstname = firstname
        this.lastname = lastname
        this.emailaddress = emailaddress
        this.organizationId = organizationId
        resetChangedOnNotNull()
    }
}
