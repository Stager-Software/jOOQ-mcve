/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.mysql.tables.records


import java.time.LocalDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.mysql.tables.User


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var createdat: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    open var modifiedat: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    open var accountId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var activatedat: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var deleted: Boolean?
        set(value): Unit = set(5, value)
        get(): Boolean? = get(5) as Boolean?

    open var organizationId: Long?
        set(value): Unit = set(6, value)
        get(): Long? = get(6) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(id: Long? = null, createdat: LocalDateTime? = null, modifiedat: LocalDateTime? = null, accountId: Long? = null, activatedat: LocalDateTime? = null, deleted: Boolean? = null, organizationId: Long? = null): this() {
        this.id = id
        this.createdat = createdat
        this.modifiedat = modifiedat
        this.accountId = accountId
        this.activatedat = activatedat
        this.deleted = deleted
        this.organizationId = organizationId
        resetChangedOnNotNull()
    }
}
