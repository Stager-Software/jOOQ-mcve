/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.mysql.tables


import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.jooq.mcve.kotlin.mysql.Mcve
import org.jooq.mcve.kotlin.mysql.indexes.USERPREFERENCE_SCHEDULEFILTERUSER_IX_USERPREFERENCE_SCHEDULEFILTERUSER__USERPREFERENCE_ID
import org.jooq.mcve.kotlin.mysql.indexes.USERPREFERENCE_SCHEDULEFILTERUSER_IX_USERPREFERENCE_SCHEDULEFILTERUSER__USER_ID
import org.jooq.mcve.kotlin.mysql.keys.FK_USERPREFERENCE_SCHEDULEFILTERUSER__USERPREFERENCE_ID
import org.jooq.mcve.kotlin.mysql.keys.FK_USERPREFERENCE_SCHEDULEFILTERUSER__USER_ID
import org.jooq.mcve.kotlin.mysql.keys.KEY_USERPREFERENCE_SCHEDULEFILTERUSER_PRIMARY
import org.jooq.mcve.kotlin.mysql.tables.User.UserPath
import org.jooq.mcve.kotlin.mysql.tables.Userpreference.UserpreferencePath
import org.jooq.mcve.kotlin.mysql.tables.records.UserpreferenceSchedulefilteruserRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserpreferenceSchedulefilteruser(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UserpreferenceSchedulefilteruserRecord>?,
    parentPath: InverseForeignKey<out Record, UserpreferenceSchedulefilteruserRecord>?,
    aliased: Table<UserpreferenceSchedulefilteruserRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UserpreferenceSchedulefilteruserRecord>(
    alias,
    Mcve.MCVE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>mcve.UserPreference_ScheduleFilterUser</code>
         */
        val USERPREFERENCE_SCHEDULEFILTERUSER: UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserpreferenceSchedulefilteruserRecord> = UserpreferenceSchedulefilteruserRecord::class.java

    /**
     * The column
     * <code>mcve.UserPreference_ScheduleFilterUser.userPreference_id</code>.
     */
    val USERPREFERENCE_ID: TableField<UserpreferenceSchedulefilteruserRecord, Long?> = createField(DSL.name("userPreference_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>mcve.UserPreference_ScheduleFilterUser.user_id</code>.
     */
    val USER_ID: TableField<UserpreferenceSchedulefilteruserRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<UserpreferenceSchedulefilteruserRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UserpreferenceSchedulefilteruserRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UserpreferenceSchedulefilteruserRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>mcve.UserPreference_ScheduleFilterUser</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>mcve.UserPreference_ScheduleFilterUser</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>mcve.UserPreference_ScheduleFilterUser</code> table
     * reference
     */
    constructor(): this(DSL.name("UserPreference_ScheduleFilterUser"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UserpreferenceSchedulefilteruserRecord>?, parentPath: InverseForeignKey<out Record, UserpreferenceSchedulefilteruserRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, USERPREFERENCE_SCHEDULEFILTERUSER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class UserpreferenceSchedulefilteruserPath : UserpreferenceSchedulefilteruser, Path<UserpreferenceSchedulefilteruserRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UserpreferenceSchedulefilteruserRecord>?, parentPath: InverseForeignKey<out Record, UserpreferenceSchedulefilteruserRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<UserpreferenceSchedulefilteruserRecord>): super(alias, aliased)
        override fun `as`(alias: String): UserpreferenceSchedulefilteruserPath = UserpreferenceSchedulefilteruserPath(DSL.name(alias), this)
        override fun `as`(alias: Name): UserpreferenceSchedulefilteruserPath = UserpreferenceSchedulefilteruserPath(alias, this)
        override fun `as`(alias: Table<*>): UserpreferenceSchedulefilteruserPath = UserpreferenceSchedulefilteruserPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Mcve.MCVE
    override fun getIndexes(): List<Index> = listOf(USERPREFERENCE_SCHEDULEFILTERUSER_IX_USERPREFERENCE_SCHEDULEFILTERUSER__USER_ID, USERPREFERENCE_SCHEDULEFILTERUSER_IX_USERPREFERENCE_SCHEDULEFILTERUSER__USERPREFERENCE_ID)
    override fun getPrimaryKey(): UniqueKey<UserpreferenceSchedulefilteruserRecord> = KEY_USERPREFERENCE_SCHEDULEFILTERUSER_PRIMARY
    override fun getReferences(): List<ForeignKey<UserpreferenceSchedulefilteruserRecord, *>> = listOf(FK_USERPREFERENCE_SCHEDULEFILTERUSER__USER_ID, FK_USERPREFERENCE_SCHEDULEFILTERUSER__USERPREFERENCE_ID)

    private lateinit var _user: UserPath

    /**
     * Get the implicit join path to the <code>mcve.User</code> table.
     */
    fun user(): UserPath {
        if (!this::_user.isInitialized)
            _user = UserPath(this, FK_USERPREFERENCE_SCHEDULEFILTERUSER__USER_ID, null)

        return _user;
    }

    val user: UserPath
        get(): UserPath = user()

    private lateinit var _userpreference: UserpreferencePath

    /**
     * Get the implicit join path to the <code>mcve.UserPreference</code> table.
     */
    fun userpreference(): UserpreferencePath {
        if (!this::_userpreference.isInitialized)
            _userpreference = UserpreferencePath(this, FK_USERPREFERENCE_SCHEDULEFILTERUSER__USERPREFERENCE_ID, null)

        return _userpreference;
    }

    val userpreference: UserpreferencePath
        get(): UserpreferencePath = userpreference()
    override fun `as`(alias: String): UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser(DSL.name(alias), this)
    override fun `as`(alias: Name): UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser(alias, this)
    override fun `as`(alias: Table<*>): UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): UserpreferenceSchedulefilteruser = UserpreferenceSchedulefilteruser(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): UserpreferenceSchedulefilteruser = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): UserpreferenceSchedulefilteruser = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): UserpreferenceSchedulefilteruser = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): UserpreferenceSchedulefilteruser = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): UserpreferenceSchedulefilteruser = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): UserpreferenceSchedulefilteruser = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): UserpreferenceSchedulefilteruser = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): UserpreferenceSchedulefilteruser = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): UserpreferenceSchedulefilteruser = where(DSL.notExists(select))
}
