package nl.stager.jooq

import java.util.Locale
import org.jooq.codegen.GeneratorStrategy
import org.jooq.codegen.JavaWriter
import org.jooq.codegen.KotlinGenerator
import org.jooq.meta.ColumnDefinition
import org.jooq.meta.Definition
import org.jooq.meta.TableDefinition
import org.jooq.meta.TypedElementDefinition

@Suppress("unused") // Referred to and called by the jooq generate Gradle plugin
class KotlinGeneratorWithFilters : KotlinGenerator() {
  internal enum class FilterableColumn {
    ORGANIZATION_ID, DELETED
  }

  override fun generateTableClassFooter(table: TableDefinition, out: JavaWriter) {
    val columnNames = table.columns.map { it.name }
    val matchingColumns = FilterableColumn.entries
      .filter { columnNames.contains(it.name.lowercase(Locale.getDefault())) }
    if (matchingColumns.isNotEmpty()) {
      out.println()
      out.println("// -------------------------------------------------------------------------")
      out.println("// THE CODE BELOW IS GENERATED BY STAGER (%s)", this.javaClass.simpleName)
      out.println("// -------------------------------------------------------------------------")
    }
    if (matchingColumns.contains(FilterableColumn.DELETED)) {
      out.println()
      generateNotDeletedMethod(out)
    }
    if (matchingColumns.contains(FilterableColumn.ORGANIZATION_ID)) {
      out.println()
      generateOrganizationMethod(out)
    }
    if (matchingColumns.size > 1) {
      out.println()
      generateAllFiltersMethod(out, matchingColumns)
    }
  }

  /** We add USELESS_CAST as this is sometimes the case and DEPRECATION for the COORDINATES type */
  override fun printClassAnnotations(
    out: JavaWriter,
    definition: Definition,
    mode: GeneratorStrategy.Mode
  ) {
    out.println("@Suppress(\"UNCHECKED_CAST\", \"USELESS_CAST\", \"DEPRECATION\")")
  }

  private fun generateAllFiltersMethod(out: JavaWriter, matchingColumns: List<FilterableColumn>) {
    val args = generateAllFiltersMethodParameters(matchingColumns)
    out.println("fun filterOrganizationAndNotDeleted($args): org.jooq.Condition {")
    out.println("return ${generateAllFiltersCondition(matchingColumns)}")
    out.println("}")
  }

  private fun generateAllFiltersMethodParameters(matchingColumns: List<FilterableColumn>): String {
    return matchingColumns
      .filter { it == FilterableColumn.ORGANIZATION_ID }
      .joinToString(", ") { generateOrganizationMethodParameter() }
  }

  private fun generateAllFiltersCondition(matchingColumns: List<FilterableColumn>): String {
    val filterConditions = matchingColumns.map {
      when (it) {
        FilterableColumn.DELETED -> generateNotDeletedCondition()
        FilterableColumn.ORGANIZATION_ID -> generateOrganizationCondition()
      }
    }
    val sb = StringBuilder()
    for (i in filterConditions.indices) {
      val condition = filterConditions[i]
      if (i == 0) {
        sb.append(condition)
      } else {
        sb.append(".and(").append(condition).append(")")
      }
    }
    return sb.toString()
  }

  private fun generateNotDeletedMethod(out: JavaWriter) {
    out.println("fun filterNotDeleted(): org.jooq.Condition {")
    out.println("return ${generateNotDeletedCondition()}")
    out.println("}")
  }

  private fun generateNotDeletedCondition(): String = "this.DELETED.isFalse"

  private fun generateOrganizationMethod(out: JavaWriter) {
    val organizationArg = generateOrganizationMethodParameter()
    out.println("fun filterOrganization($organizationArg): org.jooq.Condition {")
    out.println("return ${generateOrganizationCondition()}")
    out.println("}")
  }

  private fun generateOrganizationMethodParameter(): String = "organizationId: Long"

  private fun generateOrganizationCondition(): String = "this.ORGANIZATION_ID.eq(organizationId)"
}
